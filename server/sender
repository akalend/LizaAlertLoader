#!/usr/bin/python3

#---------------------------
# этот демон, который берет метаданные из очереди и вызывает модель  
#   запускается             ./sender start         отправляет фото в модель 
#   останавливается         ./sender stop
#   проверяем работу демона ./sender status
#---------------------------

import json
import logging
import os, sys, time
import daemon, signal
import subprocess
from random import randint

from pyramid.config import Configurator
from module.pidfile import PidFile
from module.config import conf
from module.cache import Cache


'''
     это заглушка, которая должна вызывать модель и возвращать результат 
'''
def CheckModel(photo):
    res = []
    for i in range(3):
        res.append((randint(0,1000), randint(0,1000)))

    time.sleep(2)
    return res



pidfile = '/run/api/sender.pid'
logfile = '/var/log/sender.log'
# work_home = '/home/git/api/src'
work_home = os.getcwd()


# mode = os.getenv('MODE', 'localhost')
# mode = os.getenv('MODE', 'stage')
mode = os.getenv('MODE', 'prodaction')
conf['mode'] = mode

ports = conf['port'][mode] 

conf['debug'] = False
if 'debug' in sys.argv:
    conf['debug'] = True


if len(sys.argv) == 1:
        cache = Cache()
        while 1:
            time.sleep(1)
            res = cache.pop('in')
            if not res is None: 
                item = json.loads(res.decode('ascii'))
                print(item)
                res = CheckModel(item['name'])
                
                items = ''
                for it in res:
                    items = items + '{{"x":{},"y":{}}},'.format(it[0],it[1])
                items = items[0:-1]

                cache.push( item['uid'], '{{"name":"{}","items":[{}] }}'.format(item['name'], items )    )
            else:
                print('.')


if 'start' in sys.argv:
    print(sys.argv, work_home)
    

    context = daemon.DaemonContext(
        working_directory=work_home,
        umask=0o002,
        pidfile=PidFile(pidfile),
        stdout=open(logfile, "a"),
        stderr=open(logfile, "a"),
        detach_process=True
        # logfile=logfile
    )
    with context:
        print('mode %s' % mode)
        print('process started:', 'pidfile',pidfile, 'mode', mode )
        # conf['process'] = num;
        # drop_privileges()
        # cache = Cache()
        # while 1:
        #     time.sleep(1)
        #     res = cache.get('in')
        #     if not res is None: 
        #         print(res)

elif 'status' in sys.argv:
    print('processes:')
    for dir in os.listdir('/proc'):
        try:
            if int(dir) > 1:
                path = '/proc/' + dir + '/comm'
                f=open( path )
                cmd=f.readline()
                f.close()
                if cmd == "sender\n" and os.getpid() != int(dir):
                    print('sender',dir)
        except:
            pass
    exit()

elif 'stop' in sys.argv:
    # print('len',len(ports))
    pidfile = PidFile(pidfile)
    pid = pidfile.read()
    os.kill(int(pid), signal.SIGTERM)

    exit()